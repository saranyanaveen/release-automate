name: Release Drafter

on:
  push:
    branches:
      - main
  pull_request:
    types:
      - closed

jobs:
  draft-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      # Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@v3

      # Install GitHub CLI
      - name: Install GitHub CLI
        run: |
          curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg |
          sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
          echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null
          sudo apt update
          sudo apt install gh

      # Determine version bump based on PR labels
      - name: Determine version bump type
        id: determine_bump
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Fetch merged PRs targeting the main branch
          pr_data=$(gh pr list --state merged --base main --json labels)

          # Initialize version bump type
          BUMP_TYPE="patch"

          # Check PR labels for versioning keywords
          if echo "$pr_data" | grep -iq '"breaking-change"'; then
            BUMP_TYPE="major"
          elif echo "$pr_data" | grep -iq '"feature"'; then
            BUMP_TYPE="minor"
          fi

          echo "BUMP_TYPE=$BUMP_TYPE" >> $GITHUB_ENV
          echo "Determined BUMP_TYPE=$BUMP_TYPE"

      # Get latest tag and calculate next version
      - name: Get latest tag and calculate next version
        id: calculate_version
        run: |
          # Get the latest tag
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          echo "Latest tag: $LATEST_TAG"

          # Remove the 'v' prefix and split into major, minor, patch
          VERSION=${LATEST_TAG#v}
          IFS='.' read -r major minor patch <<< "$VERSION"

          # Increment the version based on the bump type
          if [ "$BUMP_TYPE" = "major" ]; then
            major=$((major + 1))
            minor=0
            patch=0
          elif [ "$BUMP_TYPE" = "minor" ]; then
            minor=$((minor + 1))
            patch=0
          else
            patch=$((patch + 1))
          fi

          # Construct the new version
          NEW_VERSION="v$major.$minor.$patch"
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV
          echo "Calculated NEW_VERSION=$NEW_VERSION"

      # Generate release notes
      - name: Generate release notes
        id: generate_notes
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          pr_data=$(gh pr list --state merged --base main --json title,body,labels)

          # Categorize PRs by label and remove duplicates
          categorized_data=$(echo "$pr_data" | jq -r '
            group_by(.labels | map(.name) | flatten | map(select(. == "feature" or . == "bug" or . == "breaking-change"))) |
            map({
              category: (
                if any(.labels[]?.name == "feature") then "Features"
                elif any(.labels[]?.name == "bug") then "Bug Fixes"
                elif any(.labels[]?.name == "breaking-change") then "Breaking Changes"
                else "Other" end
              ),
              notes: map("\(.title): \n\(.body)") | unique | join("\n")
            }) |
            .[] |
            "## " + .category + "\n" + .notes
          ')

          echo "$categorized_data" > release_notes.md
          echo "Release notes generated and saved to release_notes.md."

      # Publish draft release
      - name: Publish draft release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.NEW_VERSION }}  # Correct way to reference the environment variable
          release_name: "Release ${{ env.NEW_VERSION }}"
          body_path: release_notes.md
          draft: true
