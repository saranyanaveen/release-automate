
name: Substitute dynamic version in Release Drafter

on:
  push:
    branches:
      - main
  pull_request:
    types:
      - opened
      - reopened
      - synchronize

      - closed

jobs:
  generate-release-notes:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          fetch-tags: true

      - name: Get latest tag version
        id: get_version
        run: |
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          echo "Latest tag: $LATEST_TAG"
          VERSION=${LATEST_TAG#v}
          IFS='.' read -r major minor patch <<< "$VERSION"
          echo "NEXT_MAJOR=$major" >> $GITHUB_ENV
          echo "NEXT_MINOR=$minor" >> $GITHUB_ENV
          echo "NEXT_PATCH=$patch" >> $GITHUB_ENV

      - name: Determine version bump type
        id: determine_bump
        run: |
          BUMP_TYPE="patch"
          if git log -1 --pretty=%B | grep -iqE "BREAKING CHANGE"; then
            BUMP_TYPE="major"
          fi
          if [[ "$BUMP_TYPE" != "major" ]] && git log -1 --pretty=%B | grep -iqE "feat|feature|enhancement|new-feature"; then
            BUMP_TYPE="minor"
          fi
          echo "BUMP_TYPE=$BUMP_TYPE" >> $GITHUB_ENV

      - name: Increment version
        run: |
          if [ "$BUMP_TYPE" = "major" ]; then
            NEXT_MAJOR=$((NEXT_MAJOR + 1))
            NEXT_MINOR=0
            NEXT_PATCH=0
          elif [ "$BUMP_TYPE" = "minor" ]; then
            NEXT_MINOR=$((NEXT_MINOR + 1))
            NEXT_PATCH=0
          else
            NEXT_PATCH=$((NEXT_PATCH + 1))
          fi
          echo "NEXT_MAJOR=$NEXT_MAJOR" >> $GITHUB_ENV
          echo "NEXT_MINOR=$NEXT_MINOR" >> $GITHUB_ENV
          echo "NEXT_PATCH=$NEXT_PATCH" >> $GITHUB_ENV
          VERSION="v$NEXT_MAJOR.$NEXT_MINOR.$NEXT_PATCH"
          echo "New version: $VERSION"

      - name: Get Commit Messages and Categorize
        id: categorize_commits
        run: |

          curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg |
          sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
          echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null
          sudo apt update
          sudo apt install gh

      - name: Verify GitHub Authentication
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        run: gh auth status

      - name: Process Pull Request Data
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          pr_data=$(gh pr list --state merged --base main --json title,body,labels,updatedAt)
          echo "PR Data: $pr_data"

          # Categorize PR data and format it for the release notes
          categorized_data=$(echo "$pr_data" | jq -r --arg version "$RESOLVED_VERSION" '
            {
              version: $version,
              categories: (
                group_by(.labels | map(.name) | flatten | map(select(. == "feature" or . == "bug" or . == "enhancement"))) |
                map({
                  category: (
                    if any(.labels[]?.name == "feature") then "✨ Features"
                    elif any(.labels[]?.name == "bug") then "🐞 Bug Fixes"
                    elif any(.labels[]?.name == "enhancement") then "📄 Enhancements"
                    else "📄 Other Changes" end
                  ),
                  notes: map("- [#\(.number)] \(.title): \(.body)") | join("\n")
                })
              )
            }
          ')
          echo "$categorized_data" > release_notes.json
          echo "Categorized PR data saved to release_notes.json"

      - name: Substitute version in release-drafter.yml
        run: |
          sed -i "s/\${RESOLVED_VERSION}/$RESOLVED_VERSION/g" .github/release-drafter.yml
          echo "Updated release-drafter.yml with version: $RESOLVED_VERSION"

          COMMIT_MESSAGES=$(git log $LATEST_TAG..HEAD --pretty=format:"%h %s %ad" --date=short)
          FEATURES=""
          BUG_FIXES=""
          OTHER_CHANGES=""
          MAINTENANCE=""
          while IFS= read -r commit; do
            COMMIT_DATE=$(echo "$commit" | awk '{print $3}')
            if echo "$commit" | grep -iqE "(feat|enhancement|new-feature)"; then
              FEATURES+="- $commit\n"
            elif echo "$commit" | grep -iqE "(bug|fix|defect)"; then
              BUG_FIXES+="- $commit\n"
            elif echo "$commit" | grep -iqE "(docs|documentation|other)"; then
              OTHER_CHANGES+="- $commit\n"
            elif echo "$commit" | grep -iqE "(chore|refactor|maintenance)"; then
              MAINTENANCE+="- $commit\n"
            fi
          done <<< "$COMMIT_MESSAGES"

          echo "FEATURES=$FEATURES" >> $GITHUB_ENV
          echo "BUG_FIXES=$BUG_FIXES" >> $GITHUB_ENV
          echo "OTHER_CHANGES=$OTHER_CHANGES" >> $GITHUB_ENV
          echo "MAINTENANCE=$MAINTENANCE" >> $GITHUB_ENV

      - name: Generate Release Notes
        id: generate_notes
        run: |
          echo "version: v${NEXT_MAJOR}.${NEXT_MINOR}.${NEXT_PATCH}" > release_notes.md
          if [ -n "$FEATURES" ]; then
            echo "features:" >> release_notes.md
            echo "$FEATURES" >> release_notes.md
          fi
          if [ -n "$BUG_FIXES" ]; then
            echo "bug_fixes:" >> release_notes.md
            echo "$BUG_FIXES" >> release_notes.md
          fi
          if [ -n "$OTHER_CHANGES" ]; then
            echo "other_changes:" >> release_notes.md
            echo "$OTHER_CHANGES" >> release_notes.md
          fi
          if [ -n "$MAINTENANCE" ]; then
            echo "maintenance:" >> release_notes.md
            echo "$MAINTENANCE" >> release_notes.md
          fi
          CONTRIBUTORS=$(git log --since="2 weeks ago" --format="%an" | sort | uniq | paste -sd ', ')
          if [ -n "$CONTRIBUTORS" ]; then
            echo "contributors:" >> release_notes.md
            echo "$CONTRIBUTORS" >> release_notes.md
          fi
          echo "Release notes generated: release_notes.md"

      - name: Publish Draft Release
        uses: actions/create-release@v1
        with:
          tag_name: $RESOLVED_VERSION
          release_name: Draft Release
          body_path: release_notes.jso
          tag_name: "v${NEXT_MAJOR}.${NEXT_MINOR}.${NEXT_PATCH}"
          release_name: "Draft Release v${NEXT_MAJOR}.${NEXT_MINOR}.${NEXT_PATCH}"
          body_path: release_notes.md

          draft: true
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}


      - name: Debug updated release-drafter.yml
        run: cat .github/release-drafter.yml
      - name: Debug generated release notes
        run: cat release_notes.md
