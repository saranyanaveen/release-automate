name: Fetch Commit Messages from Last Two Weeks

on:
  push:
    branches:
      - main
  pull_request:
    types:
      - opened
      - reopened
      - synchronize

jobs:
  fetch-commit-messages:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Fetch commits from the last two weeks
        run: |
          # Get commit messages from the last two weeks
          COMMIT_MESSAGES=$(git log --since="2 weeks ago" --pretty=format:"%h %s")
          
          # Initialize categorized data
          FEATURES=""
          BUG_FIXES=""
          OTHER_CHANGES=""
          MAINTENANCE=""

          # Loop through commit messages and categorize
          while IFS= read -r commit; do
            if echo "$commit" | grep -iqE "(feat|enhancement|new-feature)"; then
              FEATURES+="- $commit\n"
            elif echo "$commit" | grep -iqE "(bug|fix|defect)"; then
              BUG_FIXES+="- $commit\n"
            elif echo "$commit" | grep -iqE "(docs|documentation|other)"; then
              OTHER_CHANGES+="- $commit\n"
            elif echo "$commit" | grep -iqE "(chore|refactor|maintenance)"; then
              MAINTENANCE+="- $commit\n"
            fi
          done <<< "$COMMIT_MESSAGES"

          # Export categorized data to environment variables
          echo -e "FEATURES=${FEATURES}" >> $GITHUB_ENV
          echo -e "BUG_FIXES=${BUG_FIXES}" >> $GITHUB_ENV
          echo -e "OTHER_CHANGES=${OTHER_CHANGES}" >> $GITHUB_ENV
          echo -e "MAINTENANCE=${MAINTENANCE}" >> $GITHUB_ENV

      - name: Set Version
        run: |
          # Get the resolved version (from the latest tag or default to 0.0.0)
          RESOLVED_VERSION=$(git describe --tags --abbrev=0 2>/dev/null || echo "0.0.0")
          echo "RESOLVED_VERSION=${RESOLVED_VERSION}" >> $GITHUB_ENV

      - name: Generate Release Notes from Template
        run: |
          # Read the release notes template
          TEMPLATE=$(cat .github/release-drafter.yml)

          # Replace placeholders with environment variable values
          RELEASE_NOTES="${TEMPLATE/\$RESOLVED_VERSION/${RESOLVED_VERSION}}"
          RELEASE_NOTES="${RELEASE_NOTES/\$FEATURES/$(echo -e "$FEATURES")}"
          RELEASE_NOTES="${RELEASE_NOTES/\$BUG_FIXES/$(echo -e "$BUG_FIXES")}"
          RELEASE_NOTES="${RELEASE_NOTES/\$OTHER_CHANGES/$(echo -e "$OTHER_CHANGES")}"
          RELEASE_NOTES="${RELEASE_NOTES/\$MAINTENANCE/$(echo -e "$MAINTENANCE")}"
          CONTRIBUTORS=$(git log --since="2 weeks ago" --format="%an" | sort | uniq | paste -sd ', ')
          RELEASE_NOTES="${RELEASE_NOTES/\$CONTRIBUTORS/${CONTRIBUTORS}}"

          # Save the release notes to a file
          echo "$RELEASE_NOTES" > release_notes.md

      - name: Debug Generated Release Notes
        run: cat release_notes.md

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v$RESOLVED_VERSION
          name: "v$RESOLVED_VERSION"
          body_path: release_notes.md
          draft: true
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
