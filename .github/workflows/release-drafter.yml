---
  name: Release Drafter
  on:
    push:
      branches:
        - main
    pull_request:
      types:
        - opened
        - reopened
        - synchronize
        - closed
  jobs:
    draft-release:
      runs-on: ubuntu-latest
      permissions:
        contents: write
      steps:
        - name: Checkout repository
          uses: actions/checkout@v3
          with:
            fetch-depth: 0
            fetch-tags: true
        - name: Print commit message
          run: |
            echo "Commit Message: $(git log -1 --pretty=%B)"
        - name: Get latest tag version
          id: get_version
          run: >
            LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
  
            echo "Latest tag: $LATEST_TAG"
  
            VERSION=${LATEST_TAG#v}
  
            IFS='.' read -r major minor patch <<< "$VERSION"
  
            echo "NEXT_MAJOR=$major" >> $GITHUB_ENV
  
            echo "NEXT_MINOR=$minor" >> $GITHUB_ENV
  
            echo "NEXT_PATCH=$patch" >> $GITHUB_ENV
        - name: Determine version bump type
          id: determine_bump
          run: >
            BUMP_TYPE="patch"
  
            if git log -1 --pretty=%B | grep -iqE "BREAKING CHANGE"; then
              BUMP_TYPE="major"
            fi
  
            if [[ "$BUMP_TYPE" != "major" ]] && git log -1 --pretty=%B | grep -iqE "feat|feature|enhancement|new-feature"; then
              BUMP_TYPE="minor"
            fi
  
            echo "BUMP_TYPE=$BUMP_TYPE" >> $GITHUB_ENV
        - name: Increment version
          run: |
            if [ "$BUMP_TYPE" = "major" ]; then
              NEXT_MAJOR=$((NEXT_MAJOR + 1))
              NEXT_MINOR=0
              NEXT_PATCH=0
            elif [ "$BUMP_TYPE" = "minor" ]; then
              NEXT_MINOR=$((NEXT_MINOR + 1))
              NEXT_PATCH=0
            else
              NEXT_PATCH=$((NEXT_PATCH + 1))
            fi
            echo "NEXT_MAJOR=$NEXT_MAJOR" >> $GITHUB_ENV
            echo "NEXT_MINOR=$NEXT_MINOR" >> $GITHUB_ENV
            echo "NEXT_PATCH=$NEXT_PATCH" >> $GITHUB_ENV
            echo "New version: v$NEXT_MAJOR.$NEXT_MINOR.$NEXT_PATCH"
        - name: Set version for Release Drafter
          run: |
            VERSION="v${NEXT_MAJOR}.${NEXT_MINOR}.${NEXT_PATCH}"
            echo "RESOLVED_VERSION=$VERSION" >> $GITHUB_ENV
            echo "Release Version: $VERSION"
        - name: Debug RESOLVED_VERSION
          run: echo "RESOLVED_VERSION=$RESOLVED_VERSION"
        - name: Retrieve and Categorize PR Descriptions
          id: pr-descriptions
          run: >
            # Ensure GH_TOKEN is set for the `gh` CLI
  
            echo "GH_TOKEN=${{ secrets.GH_TOKEN }}" >> $GITHUB_ENV
  
  
            # Fetch PR descriptions based on labels using the GitHub CLI
  
            pr_data=$(gh pr list --state merged --base main --json title,body,labels --jq '
              .[] | 
              select(.labels[].name == "feature" or .labels[].name == "bug" or .labels[].name == "enhancement") |
              {
                title: .title,
                body: .body,
                labels: [.labels[].name]
              }
            ')
  
  
            echo "PR data: $pr_data"
  
  
            # Format PR data for release drafter
  
            categorized_data=$(echo "$pr_data" | jq -r '
              group_by(.labels[] | select(. == "feature" or . == "bug" or . == "enhancement")) as $groups |
              $groups | map({
                category: .[0].labels[0],
                notes: (map("\(.title): \n\(.body)") | join("\n"))
              }) | .[] | "## " + .category + "\n" + .notes
            ')
  
  
            echo "Categorized PR descriptions: $categorized_data" > release_notes.md
        - name: Publish Draft Release
          uses: actions/create-release@v1
          env:
            GH_TOKEN: ${{ secrets.GH_TOKEN }}
          with:
            tag_name: $RESOLVED_VERSION
            release_name: Draft Release
            body_path: release_notes.md
            draft: true
        - name: Release Drafter
          uses: release-drafter/release-drafter@v6.0.0
          with:
            config-name: release-drafter.yml
          env:
            GH_TOKEN: ${{ secrets.GH_TOKEN }}
        - name: Debug updated release-drafter.yml
          run: cat .github/release-drafter.yml
  