name: Generate Release Notes with Dynamic Version

on:
  push:
    branches:
      - main
  pull_request:
    types:
      - opened
      - reopened
      - synchronize
      - closed

jobs:
  draft-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          fetch-tags: true

      - name: Print commit message
        run: |
          echo "Commit Message: $(git log -1 --pretty=%B)"

      - name: Get latest tag version
        id: get_version
        run: |
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          echo "Latest tag: $LATEST_TAG"
          VERSION=${LATEST_TAG#v}
          IFS='.' read -r major minor patch <<< "$VERSION"
          echo "NEXT_MAJOR=$major" >> $GITHUB_ENV
          echo "NEXT_MINOR=$minor" >> $GITHUB_ENV
          echo "NEXT_PATCH=$patch" >> $GITHUB_ENV

      - name: Determine version bump type
        id: determine_bump
        run: |
          BUMP_TYPE="patch"
          if git log -1 --pretty=%B | grep -iqE "BREAKING CHANGE"; then
            BUMP_TYPE="major"
          fi
          if [[ "$BUMP_TYPE" != "major" ]] && git log -1 --pretty=%B | grep -iqE "feat|feature|enhancement|new-feature"; then
            BUMP_TYPE="minor"
          fi
          echo "BUMP_TYPE=$BUMP_TYPE" >> $GITHUB_ENV

      - name: Increment version
        run: |
          if [ "$BUMP_TYPE" = "major" ]; then
            NEXT_MAJOR=$((NEXT_MAJOR + 1))
            NEXT_MINOR=0
            NEXT_PATCH=0
          elif [ "$BUMP_TYPE" = "minor" ]; then
            NEXT_MINOR=$((NEXT_MINOR + 1))
            NEXT_PATCH=0
          else
            NEXT_PATCH=$((NEXT_PATCH + 1))
          fi
          echo "NEXT_MAJOR=$NEXT_MAJOR" >> $GITHUB_ENV
          echo "NEXT_MINOR=$NEXT_MINOR" >> $GITHUB_ENV
          echo "NEXT_PATCH=$NEXT_PATCH" >> $GITHUB_ENV
          echo "New version: v$NEXT_MAJOR.$NEXT_MINOR.$NEXT_PATCH"

      - name: Set version for release notes
        run: |
          RESOLVED_VERSION="v${NEXT_MAJOR}.${NEXT_MINOR}.${NEXT_PATCH}"
          echo "RESOLVED_VERSION=$RESOLVED_VERSION" >> $GITHUB_ENV
          echo "Release Version: $RESOLVED_VERSION"

      - name: Process Pull Request Data
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          pr_data=$(gh pr list --state merged --base main --json title,body,labels,updatedAt)
          echo "PR data: $pr_data" > pr_data.json

          categorized_data=$(echo "$pr_data" | jq -r --arg version "$RESOLVED_VERSION" '
            {
              version: $version,
              categories: (
                group_by(.labels | map(.name) | flatten | map(select(. == "feature" or . == "bug" or . == "enhancement"))) |
                map({
                  category: (
                    if any(.labels[]?.name == "feature") then "✨ Features"
                    elif any(.labels[]?.name == "bug") then "🐞 Bug Fixes"
                    elif any(.labels[]?.name == "enhancement") then "📄 Enhancements"
                    else "📄 Other Changes" end
                  ),
                  notes: map("- [#\(.number)] \(.title): \(.body)") | join("\n")
                })
              )
            }
          ')
          echo "$categorized_data" > release_notes.json
          echo "Categorized PR data saved to release_notes.json"

      - name: Generate Release Notes
        run: |
          echo "## 🚀 Release Notes for $RESOLVED_VERSION" > release_notes.md
          jq -r '.categories[] | "### \(.category)\n\n\(.notes)\n"' release_notes.json >> release_notes.md
          echo "Generated release notes:"
          cat release_notes.md

      - name: Publish Draft Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
        with:
          tag_name: $RESOLVED_VERSION
          release_name: "Release $RESOLVED_VERSION"
          body_path: release_notes.md
          draft: true
          prerelease: false
