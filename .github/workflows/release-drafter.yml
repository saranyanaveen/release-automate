name: Generate Release Notes

on:
  push:
    branches:
      - main
  pull_request:
    types:
      - opened
      - reopened
      - synchronize

jobs:
  generate-release-notes:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout repository
      - name: Checkout repository
        uses: actions/checkout@v3

      # Step 2: Print the latest commit message
      - name: Print commit message
        run: |
          echo "Commit Message: $(git log -1 --pretty=%B)"

      # Step 3: Get the latest tag version
      - name: Get latest tag version
        id: get_version
        run: |
          # Get the latest tag (e.g., v1.0.0)
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          echo "Latest tag: $LATEST_TAG"

          # Strip the 'v' from the tag (e.g., v1.0.0 -> 1.0.0)
          VERSION=${LATEST_TAG#v}
          echo "Version: $VERSION"

          # Split the version into major, minor, patch
          IFS='.' read -r major minor patch <<< "$VERSION"

          echo "NEXT_MAJOR=$major" >> $GITHUB_ENV
          echo "NEXT_MINOR=$minor" >> $GITHUB_ENV
          echo "NEXT_PATCH=$patch" >> $GITHUB_ENV

      # Step 4: Determine the version bump type
      - name: Determine version bump type
        id: determine_bump
        run: |
          # Default to patch bump
          BUMP_TYPE="patch"

          # Check commit messages for keywords
          if git log -1 --pretty=%B | grep -iqE "BREAKING CHANGE"; then
            BUMP_TYPE="major"
          fi

          # Check for feature or enhancement-related keywords for a minor bump
          if [[ "$BUMP_TYPE" != "major" ]] && git log -1 --pretty=%B | grep -iqE "feat|feature|enhancement|new-feature"; then
            BUMP_TYPE="minor"
          fi

          echo "BUMP_TYPE=$BUMP_TYPE" >> $GITHUB_ENV

      # Step 5: Increment the version
      - name: Increment version
        run: |
          # Calculate the next version based on the bump type
          if [ "$BUMP_TYPE" = "major" ]; then
            NEXT_MAJOR=$((NEXT_MAJOR + 1))
            NEXT_MINOR=0
            NEXT_PATCH=0
          elif [ "$BUMP_TYPE" = "minor" ]; then
            NEXT_MINOR=$((NEXT_MINOR + 1))
            NEXT_PATCH=0
          else
            NEXT_PATCH=$((NEXT_PATCH + 1))
          fi

          echo "NEXT_MAJOR=$NEXT_MAJOR" >> $GITHUB_ENV
          echo "NEXT_MINOR=$NEXT_MINOR" >> $GITHUB_ENV
          echo "NEXT_PATCH=$NEXT_PATCH" >> $GITHUB_ENV
          echo "New version: v$NEXT_MAJOR.$NEXT_MINOR.$NEXT_PATCH"

      # Step 6: Set version for Release Drafter
      - name: Set version for Release Drafter
        run: |
          # Construct the version manually using the incremented values
          VERSION="v${NEXT_MAJOR}.${NEXT_MINOR}.${NEXT_PATCH}"
          echo "RESOLVED_VERSION=$VERSION" >> $GITHUB_ENV
          echo "Release Version: $VERSION"

      # Step 7: Substitute the version in the release-drafter.yml
      - name: Substitute version in release-drafter.yml
        run: |
          sed -i "s/\${RESOLVED_VERSION}/$RESOLVED_VERSION/g" .github/release-drafter.yml
          echo "Updated release-drafter.yml with version: $RESOLVED_VERSION"

      # Step 8: Debug RESOLVED_VERSION
      - name: Debug RESOLVED_VERSION
        run: echo "RESOLVED_VERSION=$RESOLVED_VERSION"

      # Step 9: Generate Release Notes
      - name: Generate Release Notes from Template
        run: |
          # Read the release notes template
          TEMPLATE=$(cat .github/release-drafter.yml)

          # Replace placeholders with environment variable values
          RELEASE_NOTES="${TEMPLATE/\$RESOLVED_VERSION/${RESOLVED_VERSION}}"

          # Save the release notes to a file
          echo "$RELEASE_NOTES" > release_notes.yml

      # Step 10: Create GitHub Release
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: $RESOLVED_VERSION
          name: "Release $RESOLVED_VERSION"
          body_path: release_notes.yml
          draft: true
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
