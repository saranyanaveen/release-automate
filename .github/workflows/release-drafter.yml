name: Release Drafter
on:
  push:
    branches:
      - main
  pull_request:
    types:
      - opened
      - reopened
      - synchronize
      - closed

jobs:
  draft-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      # Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          fetch-tags: true

      # Step 1: Increment version dynamically based on commit messages
      - name: Increment Version Based on Commit Messages
        id: increment_version
        run: |
          # Get the latest tag
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          echo "Latest tag: $LATEST_TAG"
          VERSION=${LATEST_TAG#v}
          IFS='.' read -r major minor patch <<< "$VERSION"

          # Check commit messages for version bump
          COMMIT_MSG=$(git log -1 --pretty=%B)
          if echo "$COMMIT_MSG" | grep -iqE "BREAKING CHANGE"; then
            major=$((major + 1))
            minor=0
            patch=0
          elif echo "$COMMIT_MSG" | grep -iqE "feat|feature|enhancement|new-feature"; then
            minor=$((minor + 1))
            patch=0
          else
            patch=$((patch + 1))
          fi

          NEW_VERSION="v${major}.${minor}.${patch}"
          echo "New version: $NEW_VERSION"
          echo "::set-output name=new_version::$NEW_VERSION"
          echo "::set-output name=release_date::$(date +'%Y-%m-%d')"

      # Step 2: Categorize pull request data based on labels
      - name: Categorize Pull Request Data
        id: categorize_changes
        run: |
          NEW_VERSION=${{ steps.increment_version.outputs.new_version }}
          RELEASE_DATE=${{ steps.increment_version.outputs.release_date }}

          # Fetch merged pull requests data
          pr_data=$(gh pr list --state merged --base main --json title,body,labels)
          echo "PR data: $pr_data" > pr_data.json

          # Categorize data based on labels
          PR_CATEGORIES=$(cat pr_data.json | jq -r '
            group_by(.labels | map(.name) | flatten | map(select(. == "feature" or . == "bug" or . == "enhancement"))) |
            map({
              category: (
                if any(.labels[]?.name == "feature") then "Features"
                elif any(.labels[]?.name == "bug") then "Bug Fixes"
                elif any(.labels[]?.name == "enhancement") then "Enhancements"
                else "Other" end
              ),
              notes: map("- \(.title) (#\(.number)) by @\(.author.login)") | join("\n")
            }) |
            .[] |
            "## " + .category + "\n" + .notes
          ')

          # Save the categorized PR notes
          echo "$PR_CATEGORIES" > categorized_changes.md

      # Step 3: Generate the release notes dynamically
      - name: Generate Release Notes
        run: |
          NEW_VERSION=${{ steps.increment_version.outputs.new_version }}
          RELEASE_DATE=${{ steps.increment_version.outputs.release_date }}

          # Combine release version, date, and categorized changes
          RELEASE_NOTES="# Release $NEW_VERSION - $RELEASE_DATE

          $(cat categorized_changes.md)

          ### Contributors
          $(cat pr_data.json | jq -r '.[].author.login' | sort | uniq | paste -sd ', ')"

          # Save to a markdown file
          echo "$RELEASE_NOTES" > release_notes.md
          echo "Release notes generated: $(cat release_notes.md)"

      # Step 4: Create the release on GitHub
      - name: Publish Draft Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
        with:
          tag_name: ${{ steps.increment_version.outputs.new_version }}
          release_name: "Draft Release"
          body_path: release_notes.md
          draft: true
          prerelease: false

      # Step 5: Update release-drafter.yml with the new version (if applicable)
      - name: Update release-drafter.yml
        run: |
          VERSION=${{ steps.increment_version.outputs.new_version }}
          sed -i "s/\${RESOLVED_VERSION}/$VERSION/g" .github/release-drafter.yml
          echo "Updated release-drafter.yml with version: $VERSION"

      # Step 6: Run Release Drafter to generate release notes in GitHub
      - name: Run Release Drafter
        uses: release-drafter/release-drafter@v6.0.0
        with:
          config-name: release-drafter.yml
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
