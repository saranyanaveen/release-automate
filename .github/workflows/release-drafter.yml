name: Fetch Commit Messages from Last Two Weeks

on:
  push:
    branches:
      - main
  pull_request:
    types:
      - opened
      - reopened
      - synchronize

jobs:
  fetch-commit-messages:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Fetch commits from the last two weeks
        id: fetch_commits
        run: |
          # Get the commit messages from the last two weeks
          COMMIT_MESSAGES=$(git log --since="2 weeks ago" --pretty=format:"%h %s")
          
          # Prepare categorized data
          FEATURES=""
          BUG_FIXES=""
          OTHER_CHANGES=""
          MAINTENANCE=""
          
          # Loop through each commit message and categorize
          for commit in "$COMMIT_MESSAGES"; do
            if echo "$commit" | grep -iqE "(feat|enhancement|new-feature)"; then
              FEATURES+="- $commit\n"
            elif echo "$commit" | grep -iqE "(bug|fix|defect)"; then
              BUG_FIXES+="- $commit\n"
            elif echo "$commit" | grep -iqE "(docs|documentation|other)"; then
              OTHER_CHANGES+="- $commit\n"
            elif echo "$commit" | grep -iqE "(chore|refactor|maintenance)"; then
              MAINTENANCE+="- $commit\n"
            fi
          done

          # Set output variables for release
          echo "FEATURES=${FEATURES}" >> $GITHUB_ENV
          echo "BUG_FIXES=${BUG_FIXES}" >> $GITHUB_ENV
          echo "OTHER_CHANGES=${OTHER_CHANGES}" >> $GITHUB_ENV
          echo "MAINTENANCE=${MAINTENANCE}" >> $GITHUB_ENV

      - name: Generate Release Notes from Template
        id: generate_release_notes
        run: |
          # Read the template file and replace placeholders with actual values
          RELEASE_NOTES=$(cat .github/release-drafter.yml)

          # Replace placeholders with actual environment variables using shell variable substitution
          RELEASE_NOTES="${RELEASE_NOTES//\$RESOLVED_VERSION/${RESOLVED_VERSION}}"
          RELEASE_NOTES="${RELEASE_NOTES//\$FEATURES/${FEATURES}}"
          RELEASE_NOTES="${RELEASE_NOTES//\$BUG_FIXES/${BUG_FIXES}}"
          RELEASE_NOTES="${RELEASE_NOTES//\$OTHER_CHANGES/${OTHER_CHANGES}}"
          RELEASE_NOTES="${RELEASE_NOTES//\$MAINTENANCE/${MAINTENANCE}}"
          RELEASE_NOTES="${RELEASE_NOTES//\$CONTRIBUTORS/${CONTRIBUTORS}}"

          # Debugging: Print the release notes to see the result
          echo "Generated Release Notes: $RELEASE_NOTES"

          # Save the generated release notes to a file
          echo "$RELEASE_NOTES" > release_notes.yml

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v$RESOLVED_VERSION
          name: "Release v$RESOLVED_VERSION"
          body_path: release_notes.yml
          draft: true
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
